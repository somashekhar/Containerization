Note:
    CGO_ENABLED=0 does not even need Operating system undelying to run.

1. Identify your PID 1                          : java -jar fitnesse-standalone.jar -p 8080
2. List all dependencies needed to run PID 1    : jre 8,  fitnesse-standalone.jar
3. Divide (2) into
    a. Things provided by you                   : fitnesse-standalone.jar
    b. Things not ptovided by you               : jre 8
4. Based on (3b), choose a good _base image_    : 
5. Copy all 


http://fitnesse.org/fitnesse-standalone.jar?responder=releaseDownload&release=20210606

http://fitnesse.org/FitNesseDownload

FROM openjdk:8u302-jre-slim-buster
LABEL maintainer="Som Bidari <sb@gmail.com>"
WORKDIR /app
COPY fitnesse-standalone.jar .
CMD ["java", "-jar", "fitnesse-standalone.jar"]
EXPOSE 80
VOLUME /app/FitNessRoot/

docker image build -f Dockerfile -t myfitnesse:1.0 .
docker container create --name mf1 --mount type=volume,source=mf1Vol,target=/app/FitNesseRoot --publish 9006:80 myfitnesse:1.0
docker container start mf1


|------------------------------------------------------------------------------|
            Multi Stage builds 
|------------------------------------------------------------------------------|

https://github.com/rajch/ttws/releases

FROM golang:1.16-alpine3.14 AS builder
WORKDIR /go/src/github.com/rajsh/ttws
COPY . .
RUN go build -o out/ics cmd/ics/main.go

FROM alpine:3.14 AS final 
LABEL maintainer="Som Bidari <sb@gmail.com>"
WORKDIR /app
COPY --from=builder /go/src/github.com/rajsh/ttws/out/ics . 
CMD ["./ics"]
EXPOSE 8080

docker image build -t myics:0.2.1 .
docker container create --name test6 --publish 9008:8080 myics:0.2.1

|------------------------------------------------------------------------------|

FROM golang:1.16-alpine3.14 AS builder
WORKDIR /go/src/github.com/rajsh/ttws
COPY . .
RUN CGO_ENABLED=0 go build -o out/ics cmd/ics/main.go

FROM scratch AS final 
LABEL maintainer="Som Bidari <sb@gmail.com>"
WORKDIR /app
COPY --from=builder /go/src/github.com/rajsh/ttws/out/ics . 
CMD ["./ics"]
EXPOSE 8080

docker image build -t myics:0.2.1 .
docker container create --name test6 --publish 9008:8080 myics:0.2.1

